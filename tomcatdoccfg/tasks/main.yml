---
- name: Copy war file to tmp
  copy: 
    src: /opt/web.war
    dest: /tmp/web.war
       
- name: Stop Previous Containers if exists
  command: docker stop "{{ item }}"
  ignore_errors: yes
  with_items:
    - webapp1
    - webapp2
    - httplb
- name: Delete previous containers
  command: docker rm "{{ item }}"
  ignore_errors: yes
  with_items:
    - webapp1
    - webapp2  
    - httplb
- name: Create Docker container . Note Container hasn't started yet
  command: docker create --name "{{ item.value.NAME }}" --network brdgnet6 -p "{{ item.value.PORT }}":8080 tomcat:7
  with_dict: "{{ webapp }}"
  
- name: Copy war to webapps directory
  command: docker cp /tmp/web.war "{{ item }}":/usr/local/tomcat/webapps/web.war
  with_items:
    - webapp1
    - webapp2
- name: Start Docker Container
  command: docker start "{{ item }}"
  with_items:
    - webapp1
    - webapp2
    - hpptlb 
- name: Register IP Address of Webapp server
  command: docker inspect -f '{"{ .NetworkSettings.Networks.brdgnet4.IPAddress }"}' "{{ item }}"
  register: r
  with_items:
    - webapp1
    - webapp2
- debug: msg="Get data of {{ item.item }}"
  with_items: "{{ r.results }}"
- set_fact:
    app: "{{ r.results | map(attribute='stdout') | list }}"
- debug: var=app
